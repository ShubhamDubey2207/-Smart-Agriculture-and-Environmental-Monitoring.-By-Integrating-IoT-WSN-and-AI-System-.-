/***
  Author: Giridhar Urkude

  Date: 24-June-2019
  (Last updated 15-July-2019)

  ***************************************************************************************************************************************
  Summary:

  Start >> Check Sensor generated values with Arduino >> Arduino connect with XBee >> Upload empty Sketch >> Set XCTU parameters for
  XBee (with jumper usb position) >> send the packets from nodes to gateway for testing >> Make Raspberry Pi as gateway with usb XBee
  and Python code >> Set Jumper to XBee position and Power up end node with sensor individually >> See Gatway Receiving data at python 
  consol >> Stop.

  ****************************************************************************************************************************************

  General Description: This program is used for sending the data from DHT11 (humidity and temperature sensor)
             which is connected to Arduino and receiver is Raspberry-Pi 3 model B. We have used Xbee
             S2C, to establish the wireless connection.

  Before going to find Xbee device on XCTU interface using arduino and shield Remember this points (otherwise you are
             unable to find the xbee through XCTU):

             >> The Arduino must be uploaded with empty code.
             >> Jumpers of the shields must be seted to USB position, not on Xbee position.
             >> Baud rate MUST be same for all the software and devices.

  Xbee Description:  We are using "Xbee DigiMash 2.4 TH" to make the mesh network using xbee S2C. in the update
              tab of XCTU you'll get the "DigiMesh 2.4 TH" select the newest firmware version (in this case we have taken
              9002 which was the newest). The rest of the configuration is like this:

             Coordinator Configuration:
                  ID(PAN ID): 4400
                  PL: Lowest [0]
                  CE: Indirect Msg Coordinator [1]
                  DH: SH of destination (13A200)           [Please read the document https://www.digi.com/resources/documentation/digidocs/pdfs/90001526.pdf before set DH and DL]
                  DL: SL of Destination (4154EBA0)
                  NI: Coordinator
                  AP: API enable with escaping 2

             Router Configuration:
                  ID(PAN ID): 4400
                  PL: Lowest [0]
                  CE: Standard router [0]
                  DH: SH of destination (gateway) (13A200)
                  DL: SL of destination (4154EBA0)
                  NI: Router
                  AP: API enable with escaping 2

             End-Node Configuration:
                  ID(PAN ID): 4400
                  PL: Lowest [0]
                  CE:Non-Routing module  [2]
                  DH: FFFF (Broadcasting)
                  DL: 0
                  NI: End Node #
                  AP: API enable with escaping 2

             In a scenario where you establishing a network, and then you want to update the DH and DL registers of all the
             devices in the network so that they use the MAC address of the aggregator node, which has the MAC address  say 0x0013a200 4052c507,
             you could use the following technique.
                  1. Deploy all devices in the network with the default DH/DL of 0013a20/4052c507.
                  2. Deploy all devices in the network with the default DH/DL of 0xFFFF for braodcasting.

             >> All the nodes in the network that receive the broadcast set their DH to 0x0013a200 and their DL to 0x4052c507.
                These nodes automatically build a route to the aggregator node.
             >> The DH and DL addresses MUST be in numeric and SMALL ALPHABETS.       [for more info :https://github.com/andrewrapp/xbee-arduino]
             >> To send a unicast, devices must set their DH/DL registers to the MAC address of the node that they need to transmit to.
             >> Send data packets to cordinator with "send single frame and "0x10" frame type. If it succeed go further.


  Arduino Description: The DHT11 sensor has three pins (if it is of four pin than one is not used, for more
             information please google). The VCC pin is connected to 5V of arduino and GND is connected
             to ground pin of arduino. Upload the sckech on the arduino and connect the xbee with it.

  WSN communication: when you are finally succeed with all this setting of Arduino, Sensors, XBee, Raspbery Pi then it is time to make final
              communication among the nodes. For this you just have to power up your end nodes and routers (it can be batry or powerbank,
              laptop or any usb power source), and coordinator (gateway) to Raspberry Pi or any other micro porcessor like computer or laptop
              with python code for reciving the data generated by sensors. For Stablishing the WSN you MUST folow this steps:

               >> Make the End-Node and Router devices (With Arduino, Sensor, Shield, and XBee) Jumpers at XBee position.
               >> To test the Mesh Network move away end-node from cordinator until communication is lost. Then put router in between and agian
               test the coordinator consol.
  
  Difficulty: I am not able to send SenML object through XBee using due to it only support "uint8_t" to send data not a user define type object.
              The solution is we can make an API for XBee. 
              See this URLs:
              1.  https://www.elastetic.com/wp/2018/05/20/senml-messages/
              2.  https://tools.ietf.org/html/rfc8428
              3.  https://kpn-iot.github.io/senml-library/
              4.  https://kpn-iot.github.io/senml-c-library/
              5.  https://github.com/kpn-iot/senml-c-library/tree/master/examples
               



*/

#include <XBee.h>    //  XBee library  #include<dht.h>      //  dht11(humidity and temperature sensor) library

#include<dht.h>      //  dht11(humidity and temperature sensor) library

#define PIN A0       // pin 7 of arduino is connected to data pin of dht11 sensor.

dht DHT;            // DHT is the instance of dht class (declared and defined in "dht.h" header file).

XBee xbee = XBee(); // xbee is the object of XBee class. 


void setup(){     // Setting up the baud-rate for the xbee communication.
  
    Serial.begin(9600);  // 9600 bit per second transmission rate (it should be same for all arduino devices).
    delay(1000);
    Serial.println("start");
    xbee.setSerial(Serial);

}

void loop(){

    uint8_t data[] = {"{\"bn\":\"Arduino uno Node1\",\"n\":\"temperature\",\"u\":\"Cel\",\"v\": 00.0}"};
    
    int chk = DHT.read11(PIN);  
    float temp = DHT.temperature;  //Acquiring data from temperature sensor using "dht.h" lib.
    float humi = DHT.humidity;   //Acquiring data from humidity sensor using "dht.h" lib.
   
    Serial.print("Temperature = ");  // Printing the value at serial monitor.
    Serial.println(temp);
    Serial.print("Current Humidity = ");
    Serial.println(humi);
    

     char tempToStr[5] = "";

     
     dtostrf(temp,5,1,tempToStr);   //Float to Sting Function dtostrf(floatVar, minStringWidthIncDecimalPoint, numVarsAfterDecimal, charBuf);

     Serial.print(tempToStr); 
     
     for(int i=58, j=0; i<=62; i++, j++){    //appending temp value to static data[] string at section v:---.-
        data[i] = tempToStr [j];
       }
         
     
      Serial.println();
      Serial.println("Size of Payload: ");
      Serial.println(sizeof(data));
  
      //int count=0;
      int i=0;
            
      do{  
          //count++;
          //Serial.print(data[i]);
          Serial.print((char)data[i]);
          //Serial.println(count);
          i++;
        }
        while(data[i] != '\0');
      Serial.println(); 
      //Serial.println(count);
  
      
  
      //XBeeAddress64 addr64 = XBeeAddress64(0x0013A200, 0x4154EBA0)
      XBeeAddress64 addr64 = XBeeAddress64(0x0013a200,0x4154eba0);        // The address MUST be in Numeric and Small Alphabets.
      //addr64.setMsb(0); 
      //addr64.setLsb(0);
      ZBTxRequest zbTx = ZBTxRequest(addr64, data, sizeof(data));
      //ZBTxStatusResponse txStatus = ZBTxStatusResponse();
      
      xbee.send(zbTx);

      /*
      if (xbee.getResponse().getApiId() == ZB_TX_STATUS_RESPONSE) {
      xbee.getResponse().getZBTxStatusResponse(txStatus);
      Serial.println("\t\tTX STATUS");
        if (txStatus.getDeliveryStatus() == SUCCESS) {
          Serial.println("\t\t\tSUCCESS");
        }
      }
      */
      Serial.println("\n\n");
    delay(2000);
    //delay(3600000);
}
